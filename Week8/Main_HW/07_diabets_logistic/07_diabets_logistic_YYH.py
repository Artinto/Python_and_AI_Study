# -*- coding: utf-8 -*-
"""07_diabets_logistic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18OCFtEubfwl6niUqKnZ7vIr2c8PQqboe
"""

from torch import nn, optim, from_numpy
import numpy as np

xy = np.loadtxt('/content/drive/MyDrive/diabetes.csv', delimiter=',', dtype=np.float32)   # 파일 마운트  구분자는 , 이고 데이터타입은 float 32 로 지정
x_data = from_numpy(xy[:, 0:-1])                                        # x_data에 xy 파일에서 마지막 열을 뺀 행을 텐서로 저장 
y_data = from_numpy(xy[:, [-1]])                                        #y_data에 xy파일에서 마지막열을 텐서로 저장

print(f'X\'s shape: {x_data.shape} | Y\'s shape: {y_data.shape}')       #x ,y _data의 shape  를 출력


class Model(nn.Module):                                                                             
    def __init__(self):
        """
        In the constructor we instantiate two nn.Linear module
        """
        super(Model, self).__init__()
        self.l1 = nn.Linear(8, 6)                                        #input 8 output 6
        self.l2 = nn.Linear(6, 4)                                        #input 6 output 4
        self.l3 = nn.Linear(4, 1)                                        #input 4 output 1    x=8 -> y=1 

        self.sigmoid = nn.Sigmoid()                                      #시그모이드

    def forward(self, x):
        """
        In the forward function we accept a Variable of input data and we must return
        a Variable of output data. We can use Modules defined in the constructor as
        well as arbitrary operators on Variables.
        """
        out1 = self.sigmoid(self.l1(x))
        out2 = self.sigmoid(self.l2(out1))
        y_pred = self.sigmoid(self.l3(out2))
        return y_pred


# our model
model = Model()


# Construct our loss function and an Optimizer. The call to model.parameters()
# in the SGD constructor will contain the learnable parameters of the two
# nn.Linear modules which are members of the model.
criterion = nn.BCELoss(reduction='mean')                                 #BCEloss로 구한 오차값의 평균              
optimizer = optim.SGD(model.parameters(), lr=0.1)                        #경사하강법

# Training loop
for epoch in range(100):                                                 #100번
    # Forward pass: Compute predicted y by passing x to the model
    y_pred = model(x_data)                                                

    # Compute and print loss
    loss = criterion(y_pred, y_data)                                     #loss 구함
    print(f'Epoch: {epoch + 1}/100 | Loss: {loss.item():.4f}')           #횟수 및 로스 출력

    # Zero gradients, perform a backward pass, and update the weights.
    optimizer.zero_grad()                                                #초기화
    loss.backward()
    optimizer.step()