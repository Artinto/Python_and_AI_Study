# -*- coding: utf-8 -*-
"""Sub_HW_LGY

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-cjOQ9a-IHRuha3Pj6kuGUCsZXtMr0Jn

# 실습 2-1: Softmax Classification 만들기 (with.CNN)

## 1. 필요한 모듈 선언하기
"""

import torch 
from torch import nn, optim, cuda
from torch.utils import data
import torch.nn.functional as F
import time
import torchvision
from torchvision import datasets, transforms
import numpy as np

from torch.autograd import Variable

"""## 2. Device 선언 및 랜덤 시드 고정

### 2-1) device 선언
"""

device = 'cuda' if cuda.is_available() else 'cpu' # GPU 사용가능하면 사용, 없으면 CPU

"""### 2-2) 랜덤 시드 고정"""

torch.manual_seed(777)
if device=='cuda':
  torch.cuda.manual_seed_all(777)

"""## 3. 데이터셋 불러오기¶

### 3-1) 이미지 전처리
"""

transform = transforms.Compose([transforms.ToTensor(),transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

"""### 3-2) 데이터셋 불러오기"""

trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                        download=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=128,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transform)
testloader = torch.utils.data.DataLoader(testset, batch_size=64,
                                         shuffle=False, num_workers=2)

classes = ('plane', 'car', 'bird', 'cat',
           'deer', 'dog', 'frog', 'horse', 'ship', 'truck')

"""## 4. 모델 선언

### 4-1) class로 Model 만들기
"""

class Net(nn.Module):

    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(3, 20 , kernel_size=5, padding=2)
        self.conv2 = nn.Conv2d(20, 40, kernel_size=5, padding=2)
        self.mp = nn.MaxPool2d(2)
        self.fc1 = nn.Linear(320*8, 32*8)
        self.fc2 = nn.Linear(32*8, 64)
        self.fc3 = nn.Linear(64, 10)

    def forward(self, x):
        in_size = x.size(0)
        x = F.relu(self.mp(self.conv1(x)))
        x = F.relu(self.mp(self.conv2(x)))
        # print(x.size())
        x = x.view(-1,320*8) # flatten the tensor
        
        x = self.fc3(self.fc2(self.fc1(x)))
        
        return F.log_softmax(x,dim=1)
        # F.softmax() + torch.log() = F.log_softmax()
        # dim=1이어야 함.

"""4-2) Model 선언"""

model = Net()
model.to(device)

"""## 5. 학습 시작

### 5-1) loss 및 optimizer 선언
"""

optimizer = optim.Adam(model.parameters(), lr= 0.001)

"""### 5-2) train, test 함수 """

# 학습

def train():
    model.train()
    for batch_idx, (data, target) in enumerate(trainloader):
        data = data.to(device)
        target = target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.nll_loss(output, target)  #
        loss.backward()
        optimizer.step()
        if batch_idx % 10 == 0:
            print('Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
                epoch, batch_idx * len(data), len(trainloader.dataset),
                100. * batch_idx / len(trainloader), loss.item()))


def test():
    model.eval()
    test_loss = 0
    correct = 0
    for data, target in testloader:
        data = data.to(device)
        target = target.to(device)
        output = model(data)
        # sum up batch loss
        test_loss += F.nll_loss(output, target, size_average=True).data
        # get the index of the max log-probability
        pred = output.data.max(1, keepdim=True)[1]
        correct += pred.eq(target.data.view_as(pred)).cpu().sum()

    test_loss /= len(testloader.dataset)
    print('\nTest set: Average loss: {:.4f}, Accuracy: {}/{} ({:.0f}%)\n'.format(
        test_loss, correct, len(testloader.dataset),
        100. * correct / len(testloader.dataset)))

for epoch in range(1, 10):
    train()
    test()